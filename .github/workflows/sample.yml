# This is a basic workflow to help you get started with Actions

name: CI

on:
  workflow_call:
    inputs:
          name:
            description: 'Name to say hello too'
            required: false
            type: string
            default: 'world'
    
          checkout_commit:
            description: Commit ID you want to checkout
            type: string
            required: true
          GITHUB_BASE_REF: 
            description: target branch merging into
            type: string
            required: true
          GITHUB_HEAD_REF: 
            description: source branch coming from
            type: string
            required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.checkout_commit }}

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, ${{ inputs.name }}!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          export GITHUB_BASE_REF=${{inputs.GITHUB_BASE_REF}}
          export GITHUB_HEAD_REF=${{inputs.GITHUB_HEAD_REF}}
          env
          echo "-------------------"
          echo "Target:"
          echo "var: $GITHUB_BASE_REF"
          echo "inputs: ${{inputs.GITHUB_BASE_REF}}"
           echo "-------------------"
          echo "CURRENT BRANCH"
          echo "var: $GITHUB_HEAD_REF"
          echo "inputs: ${{inputs.GITHUB_HEAD_REF}}"
          echo "-------------------"
          #!/bin/bash

          # Generate a random number between 0 and 1
          random_number=$(awk -v seed="$RANDOM" 'BEGIN{srand(seed);print rand()}')

          # Check if the random number is less than 0.5
          if (( $(echo "$random_number < 0.5" | bc -l) )); then
            echo "Exiting with non-zero error."
            exit 1
          else
            echo "Exiting with zero error."
            exit 0
          fi
