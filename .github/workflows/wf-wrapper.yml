on:
  workflow_call:
    inputs:
        status-name:
          description: 'A name of the status to use'
          default: 'CI'
          required: false
          type: string

jobs:    
  start-pipeline:
    name: Set Running
    runs-on: ubuntu-latest
    steps:
      - name: Get Latest Commit ID
        id: commit_id
        run: |
          pull_request_url=$(jq -r ".issue.pull_request.url" "$GITHUB_EVENT_PATH")
          commit_id=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "$pull_request_url" \
            | jq -r ".head.sha")
          echo "COMMIT_ID=$commit_id" >> $GITHUB_ENV
      - name: Print Latest Commit ID
        run: |
          echo "Latest commit ID is ${{ env.COMMIT_ID }}"
          echo "URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "Input: ${{ inputs.status-name }}"
          echo "${{ toJson(github) }}"
      - name: Set commit status running
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
              github.repos.createCommitStatus({
                sha: "${{ env.COMMIT_ID }}",
                state: 'pending',
                target_url: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                description: 'Job running',
                context: "${{ inputs.status-name }}"
              })
          
  execute-main-workflow:
    needs: [ start-pipeline ]
    uses: daniel-test-bed/workflows/.github/workflows/sample.yml@main
  
  complete-pipeline:
    needs: [ start-pipeline, execute-main-workflow]
    runs-on: ubuntu-latest
    steps:
      - name: Get Job Status
        id: get-job-status
        run: echo "::set-output name=job-status::${{ job.status }}"
        env:
          job-id: ${{ needs.execute-main-workflow.id }}
      - name: set status
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const context = github.context;
            const octokit = github.getOctokit("${{ secrets.GITHUB_TOKEN }}");
            const jobStatus = "${{ steps.get-job-status.outputs.job-status }}";

            if (jobStatus === "success") {
              octokit.repos.createCommitStatus({
                ...context.repo,
                sha: context.sha,
                state: "success",
                description: "The job passed",
                context: "${{ github.event.inputs.status-name }}"
              });
            } else {
              octokit.repos.createCommitStatus({
                ...context.repo,
                sha: context.sha,
                state: "failure",
                description: "The job failed",
                context: "${{ github.event.inputs.status-name }}"
              });
